{"version":3,"sources":["components/SearchBox/SearchBox.js","components/EntryDetail/EntryDetail.js","components/EntryActions/EntryActions.js","utils/utils.js","components/EntryTimes/EntryTimes.js","components/Entry/Entry.js","components/WorldTimeWidget/WorldTimeWidget.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","state","value","listOfCities","handleInputChange","bind","getCitiesNames","addCity","this","timer","clearTimeout","setState","setTimeout","cityName","fetch","then","response","json","data","forEach","item","push","id","wikiDataId","name","city","region","country","catch","err","console","error","onAdd","className","type","placeholder","onChange","e","target","map","onClick","React","Component","EntryDetails","isHome","icon","faHome","timeDifference","location","timeAndDate","time","date","EntryActions","onRemove","faTrash","getCityDateTime","dateObj","moment","parseZone","datetime","subtract","format","add","timezone","UTCtimeDifference","EntryTimes","timeEntries","startDate","i","main","secondary","generateTimeEntries","timeEntry","index","styles","hour","parseInt","generateStyles","Entry","EntryDetail","WorldTimeWidget","listOfEntries","entries","handleAction","handleAddition","calculateTimezoneDifferences","ms","Promise","resolve","reject","homeCity","find","diff","a","entry","tmpArray","concat","waitPromise","getListOfEntries","entryId","filter","key","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ef1b9ad7.chunk.js","sourcesContent":["// External Dependencies\nimport React from 'react';\n\n// Styles\nimport './SearchBox.styles.css';\n\n// Constants\nconst WAIT_TIME = 1000;\n\nexport default class SearchBox extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            listOfCities: []\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.getCitiesNames = this.getCitiesNames.bind(this);\n        this.addCity = this.addCity.bind(this);\n    }\n\n    componentDidMount() {\n        this.timer = null;\n    }\n\n    handleInputChange(value) {\n\n        clearTimeout(this.timer);\n\n        this.setState({ 'listOfCities': [] });\n        this.setState({ 'value': value });\n\n        this.timer = setTimeout(this.getCitiesNames, WAIT_TIME);\n    }\n\n    getCitiesNames() {\n        const cityName = this.state.value;\n        let listOfCities = this.state.listOfCities;\n\n        if (cityName) {\n            fetch(`https://rapidapi.p.rapidapi.com/v1/geo/cities?limit=5&minPopulation=100000&namePrefix=${cityName}`, {\n                'method': 'GET',\n                'headers': {\n                    'x-rapidapi-host': 'wft-geo-db.p.rapidapi.com',\n                    'x-rapidapi-key': 'c5baede715msh421af9752656179p152c75jsnb8e941a23c06'\n                }\n            })\n                .then(response => {\n                    return response.json();\n                })\n                .then(data => {\n                    data.data.forEach((item) => {\n                        //listOfCities.push(`${item.city}, ${item.country}`);\n                        listOfCities.push(\n                            {\n                                id: item.wikiDataId,\n                                name: item.city,\n                                region: item.region,\n                                country: item.country\n                            }\n                        );\n                    });\n\n                    this.setState({ 'listOfCities': listOfCities });\n                })\n                .catch(err => {\n                    console.error(err);\n                });\n        }\n    }\n\n    addCity(city) {\n        this.setState({ 'listOfCities': [] });\n        this.setState({ 'value': '' });\n\n        this.props.onAdd(city);\n    }\n\n    render() {\n        return (\n            <form className=\"search-box\">\n                <input type=\"text\" value={this.state.value} placeholder=\"Find city - Press ⏎\" onChange={ (e) => this.handleInputChange(e.target.value) } />\n                <div className=\"cities-list\">\n                    <ul>\n                        { this.state.listOfCities && this.state.listOfCities.map((city) => <li onClick={ (e) => this.addCity(city) }>{ `${city.name}, ${city.region}, ${city.country}` }</li> )}\n                    </ul>\n                </div>\n            </form>\n        );\n    }\n}\n","// External Dependencies\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\n\n// Styles\nimport './EntryDetails.styles.css';\n\nfunction EntryDetails(props) {\n    return (\n        <div className=\"entry-details\">\n            <span>\n                { props.data.isHome && <FontAwesomeIcon icon={faHome} /> }\n\n                { !props.data.isHome && props.data.timeDifference && `${props.data.timeDifference}` }\n            </span>\n\n            <div className=\"entry-details__place\">\n                <p className=\"title\">{ props.data.location.city }</p>\n                <p className=\"subtitle\">{ props.data.location.country }</p>\n            </div>\n\n            <div className=\"entry-details__time\">\n                <p className=\"title\">{ `${props.data.timeAndDate.time}` }</p>\n                <p className=\"subtitle\">{ props.data.timeAndDate.date }</p>\n            </div>\n        </div>\n    );\n}\n\nexport default EntryDetails;\n","// External Dependencies\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons/faTrash';\n\n// Styles\nimport './EntryActions.styles.css';\n\nfunction EntryActions(props) {\n    return (\n        <div className=\"entry-actions\" onClick={ () => props.onRemove(props.data.id) }>\n            <FontAwesomeIcon icon={faTrash} />\n        </div>\n    );\n}\n\nexport default EntryActions;\n","// External Dependencies\nimport moment from 'moment';\n\nconst generateTimeEntries = function(startDate) {\n    startDate = moment(startDate);\n    let timeEntries = [];\n\n    for (let i = 0; i <= 20; i++) {\n        let placeholder = startDate.add(1, 'hour');\n\n        if (placeholder.format('a') === 'am' && placeholder.format('h') === '12') {\n            timeEntries.push({\n                main: placeholder.format('MMM'),\n                secondary: placeholder.format('D')\n            });\n        } else {\n            timeEntries.push({\n                main: placeholder.format('h'),\n                secondary: placeholder.format('a')\n            });\n        }\n    }\n\n    return timeEntries;\n}\n\nconst generateStyles = function(timeEntry) {\n    let styles = 'gray';\n    let hour = parseInt(timeEntry.main, 10);\n\n    if (timeEntry.secondary === 'am') {\n        if (hour >= 1 && hour <= 5) {\n            styles = 'dark-blue';\n        } else if (hour === 12) {\n            styles = 'dark-blue';\n        } else if (hour === 6 || hour === 7) {\n            styles = 'light-blue';\n        }\n    } else if (timeEntry.secondary === 'pm') {\n        if (hour >= 6 && hour <= 8) {\n            styles = 'light-blue';\n        } else if (hour === 9 || hour === 10) {\n            styles = 'dark-blue';\n        } else if (hour === 11) {\n            styles = 'dark-blue end';\n        }\n    } else {\n        styles = 'dark-blue start'\n    }\n\n    return styles;\n}\n\nconst getCityDateTime = function(city) {\n\n    return fetch(`https://rapidapi.p.rapidapi.com/v1/geo/cities/${city.id}/dateTime`, {\n        'method': 'GET',\n        'headers': {\n            'x-rapidapi-host': 'wft-geo-db.p.rapidapi.com',\n            'x-rapidapi-key': 'c5baede715msh421af9752656179p152c75jsnb8e941a23c06'\n        }\n    })\n        .then(response => {\n            return response.json();\n        })\n        .then(data => {\n            const dateObj = moment.parseZone(data.data);\n\n            return {\n                id: city.id,\n                isHome: city.isHome,\n                location: {\n                    city: city.name,\n                    country: city.country\n                },\n                timeAndDate: {\n                    datetime: dateObj.subtract(2, 'hour').format('YYYY-MM-DD[T]HH'),\n                    time: dateObj.add(2, 'hour').format('H:mma'),\n                    timezone: dateObj.format('z'),\n                    date: dateObj.format('ddd, MMM DD'),\n                    UTCtimeDifference: dateObj.format('Z')\n                }\n            };\n\n        })\n        .catch(err => {\n            console.error(err);\n        });\n};\n\nconst calculateTimezoneDifferences = function(listOfCities) {\n    const homeCity = listOfCities.find((city) => {\n        return city.isHome;\n    });\n\n    return listOfCities.map((city) => {\n        return {\n            ...city,\n            timeDifference: moment.parseZone(homeCity.timeAndDate.datetime).diff(moment.parseZone(city.timeAndDate.datetime), 'hours')\n        };\n    });\n};\n\nexport { generateTimeEntries, generateStyles, getCityDateTime, calculateTimezoneDifferences };\n","// External Dependencies\nimport React from 'react';\n\n// Custom Dependencies\nimport { generateStyles, generateTimeEntries } from '../../utils/utils';\n\n// Styles\nimport './EntryTimes.styles.css';\n\nfunction EntryTimes(props) {\n    const timeEntries = generateTimeEntries(props.data.timeAndDate.datetime);\n\n    return (\n        <div className=\"entry-times\">\n            <ul>\n                { timeEntries &&  timeEntries.map((timeEntry, index) => {\n                    let styles = generateStyles(timeEntry);\n                    styles += index === 1 ? ' current-time' : '';\n\n                    return <li className={styles}>{ timeEntry.main } <span>{ timeEntry.secondary }</span></li>;\n                }) }\n            </ul>\n        </div>\n    );\n}\n\nexport default EntryTimes;\n","// External Dependencies\nimport React from 'react';\n\n// Custom Dependencies\nimport EntryDetails from '../EntryDetail/EntryDetail';\nimport EntryActions from '../EntryActions/EntryActions';\nimport EntryTimes from '../EntryTimes/EntryTimes';\n\n// Styles\nimport './Entry.styles.css';\n\nfunction Entry(props) {\n    return (\n        <div className=\"entry\">\n            <EntryActions data={props.data} onRemove={props.onRemove} />\n            <EntryDetails data={props.data} />\n            <EntryTimes data={props.data} />\n        </div>\n    );\n}\n\nexport default Entry;\n","// External Dependencies\nimport React from 'react';\nimport moment from \"moment\";\n\n// Custom Dependencies\nimport SearchBox from '../SearchBox/SearchBox';\nimport Entry from '../Entry/Entry';\nimport { getCityDateTime } from '../../utils/utils';\n\n// Styles\nimport './WorldTimeWidget.styles.css';\n\nexport default class WorldTimeWidget extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.listOfEntries = [\n            {\n                id: 'Q9022',\n                name: 'Guadalajara',\n                region: 'Jalisco',\n                country: 'Mexico',\n                isHome: true\n            }, {\n                id: 'Q84',\n                name: 'London',\n                region: 'England',\n                country: 'United Kingdom',\n                isHome: false\n            }, {\n                id: 'Q189138',\n                name: 'Hermosillo',\n                region: 'Sonora',\n                country: 'Mexico',\n                isHome: false\n            }\n        ];\n\n        this.state = {\n            entries: []\n        };\n\n        this.handleAction = this.handleAction.bind(this);\n        this.handleAddition = this.handleAddition.bind(this);\n        this.calculateTimezoneDifferences = this.calculateTimezoneDifferences.bind(this);\n    }\n\n    waitPromise(ms) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve(ms);\n            }, ms);\n        });\n    }\n\n    calculateTimezoneDifferences() {\n        const homeCity = this.state.entries.find((city) => {\n            return city.isHome;\n        });\n\n        this.setState((state) => {\n            return {\n                entries: this.state.entries.map((city) => {\n                    return {\n                        ...city,\n                        timeDifference: moment.parseZone(city.timeAndDate.datetime).diff(moment.parseZone(homeCity.timeAndDate.datetime), 'hours')\n                    }\n                })\n            };\n        });\n    };\n\n    componentDidMount() {\n        const getListOfEntries = async () => {\n            for (const entry of this.listOfEntries) {\n                getCityDateTime(entry)\n                    .then((data) => {\n                        let tmpArray = this.state.entries.concat(data);\n                        this.setState({ entries: tmpArray });\n                    });\n                await this.waitPromise(2000); // Hack to avoid making too many requests to the API.\n            }\n        };\n\n        getListOfEntries().then(() => {\n            this.calculateTimezoneDifferences();\n        });\n    }\n\n    handleAction(entryId) {\n        this.setState({entries: this.state.entries.filter(function(entry) {\n            return entry.id !== entryId;\n        })});\n    }\n\n    handleAddition(city) {\n        getCityDateTime(city)\n            .then((data) => {\n                let tmpArray = this.state.entries.concat(data);\n                this.setState({ entries: tmpArray });\n            })\n            .then(() => {\n                this.calculateTimezoneDifferences();\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"world-time-widget\">\n                <SearchBox onAdd={this.handleAddition} />\n\n                { this.state.entries && this.state.entries.map((entry) => <Entry key={entry.id} data={entry} onRemove={this.handleAction} />) }\n            </div>\n        );\n    };\n}\n","// External Dependencies\nimport React from 'react';\n\n// Custom Dependencies\nimport WorldTimeWidget from './components/WorldTimeWidget/WorldTimeWidget';\n\n// Styles\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WorldTimeWidget />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}